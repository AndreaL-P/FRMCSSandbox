openapi: 3.0.0
info:
  version: '0.1'
  title: OBapp
  description: |
    OBapp reference point.  
    © International Union of Railways (UIC) – Paris, 2024 
externalDocs:
  description: OBapp reference point
  url: https://uic.org/rail-system/telecoms-signalling/frmcs
servers:
  - url: '{apiRoot}/obapp/v1'
    variables:
      apiRoot:
        default: https://uic.org
        description: apiRoot as defined in clause x.y of UIC FFFIS xyz
paths:
  /registrations:
    post:
      summary: Register an application
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterData'
      responses:
        '201':
          description: Successful registration
          headers:
            Location:
              description: 'URI of the registered application instance'
              required: true
              schema:
                $ref: '#/components/schemas/Uri'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterErrorData'

  /registrations/{DynamicId}:
    get:
      summary: Get information on an application registration
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
      responses:
        '200':
          description: OK
        '404':
          description: Not found
    delete:
      summary: De-register an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
      responses:
        '204':
          description: No content

  /sessions/{DynamicId}:
    get:
      summary: List of sessions for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
      responses:
        '200':
          description: OK
        '404':
          description: Not found
    post:
      summary: Create a session for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionOpenData'
      responses:
        '201':
          description: 'Session created'
          headers:
            Location:
              description: 'URI of the session which was opened'
              required: true
              schema:
                $ref: '#/components/schemas/Uri'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionOpenedData'
        '400':
          description: Bad request
    delete:
      summary: Terminate all sessions for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
      responses:
        '204':
          description: No content

  /sessions/{DynamicId}/{SessionId}:
    get:
      summary: Get information on a session of an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
        - name: SessionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '200':
          description: OK
        '404':
          description: Not found
    put:
      summary: Accept an incoming session for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
        - name: SessionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
    delete:
      summary: Terminate a session for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
        - name: SessionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      responses:
        '204':
          description: No content

  /notifications/general:
    get:
      summary: Get general notifications
      responses:
        '200':
          description: Subscribe to the general notification channel
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    delete:
      summary: Unsubscribe all subscriptions to the general notification channel
      responses:
        '204':
          description: No content

  /notifications/{DynamicId}/{Channel}:
    get:
      summary: Subscribe to a specific channel for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
        - name: Channel
          in: path
          required: true
          schema:
            type: object
      responses:
        '200':
          description: A list of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    delete:
      summary: Unsubscribe to a specific channel for an application
      parameters:
        - name: DynamicId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/DynamicId'
        - name: Channel
          in: path
          required: true
          schema:
            type: object
      responses:
        '204':
          description: No content

components:
  schemas:
    # FFFIS application and session identifiers
    # TODO: need to specify the version of UUID that shall be used
    DynamicId:
      description: "identifier of the application instance, dynamically assigned at registration. UUID."
      type: string
      format: uuid
    SessionId:
      description: "identifier of the application session. UUID"
      type: string
      format: uuid

    # IPv4 / IPv6 addresses
    # Aligned with 3GPP 29.571 Common Data yaml description
    Ipv4Addr:
      description: String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
      type: string
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'
      example: '198.51.100.1'
    Ipv6Addr:
      description: String identifying an IPv6 address formatted according to clause 4 of RFC5952.
      type: string
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))$'
      example: '2001:db8:85a3::8a2e:370:7334'

    # IP address
    # Similar to 3GPP 29.571 Common Data yaml description (without ipv6Prefix which is not applicable in FRMCS FFFIS)
    IpAddr:
      description: Contains an IP adress.
      type: object
      oneOf:
        - required:
          - ipv4Addr
        - required:
          - ipv6Addr
      properties:
        ipv4Addr:
          $ref: '#/components/schemas/Ipv4Addr'
        ipv6Addr:
          $ref: '#/components/schemas/Ipv6Addr'

    # URI, aligned with 3GPP 29.571 Common Data yaml description
    Uri:
      description: String providing an URI formatted according to RFC 3986.
      type: string
      
    # FQDN, aligned with 3GPP 29.571 Common Data yaml description
    Fqdn:
      description: Fully Qualified Domain Name
      type: string
      pattern: '^([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?\.)+[A-Za-z]{2,63}\.?$'
      minLength: 4
      maxLength: 253

    # FFFIS enums

    # TODO: is a closed list enumeration the right thing to do if the FRMCS framework foresees that applications could be added
    # Ultimately, the ApplicationCategory serves to retrieve from the FOAP the parameters associated to the application
    # In the context of railway interoperability, there shall be harmonized application categories but the schema shall allow for non-harmonized extensions
    # which would allow for IM-specific non-interoperable applications (Type II) and RU-specific non-interoperable applications (that would be subject to use where 
    # IMs within the area of use authorize it 
    ApplicationCategory:
      description: Provides the category of the Application (e.g., ETCS, ATO, FRMCS Voice Application Function, TCMS, etc.). 
        When applicable, this parameter is used to link the registration to the necessary 3GPP MCX service(s).
      type: string
      enum:
        - CategoryA
        - CategoryB
        - CategoryC

    # TODO: a multipart schema would be preferable over a single string as this would facilitate the usage of mapping rules when
    # generating the MC Service User ID associated to a given application 
    # Note: as it helps with establishing identity within the MCX framework, it may actually be more representative of the identification of an 
    # application instance or the service user associated to the application than the application itself. 
    ApplicationStaticIdentifier:
      description: Unique identifier of the Application.
      type: string
      
    CouplingMode:
      description: >
        The application coupling mode.
        Possible values:
          - tight for Tight Coupled mode
          - loose for Loose Coupled mode
      type: string
      enum:
        - tight
        - loose
      default: loose

    DataComm:
      description: "The data communication mode is used by the Communication category parameter. It reflects the possible values applicable to this mode: basic or criticale"
      type: string
      enum:
        - basic
        - critical
      default: basic
    
    RemoteAddress:
      description: "Remote address of an application in the scope of session exchange messages"
      type: string
      minLength: 3
      maxLength: 255

    SessionStartReqFirstStatus:
      description: "Provides the first status of a Session start request. This parameter is used in the Session start first answer message"
      type: string
      enum:
        - inProgress
        - networkNotReady
        - notRegistered
        - rejected
      default: inProgress
      
    VideoComm:
      description: "The video communication mode is used by the Communication category parameter. It reflects the possible values applicable to this mode: basic or critical."
      type: string
      enum:
        - basic
        - critical
      default: basic

    # FFFIS payloads
    CommunicationCategory:
      description: "This parameter reflects the different categories of communication (session) that can be established over the FRMCS according to the [FRMCS FRS]. This parameter is used by the On-Board FRMCS to initiate an end-to-end session. Based on this parameter, the On-Board FRMCS assigns the right communication profile including the QoS level to the session."
      type: object
      oneOf:
        - $ref: "#/components/schemas/DataComm"
        - $ref: "#/components/schemas/VideoComm"
      default: "basic"
      
    Recipient:
      description: "Recipient"
      type: object
      properties:
        remoteAddress:
          $ref: "#/components/schemas/RemoteAddress"
        communicationCategory:
          $ref: "#/components/schemas/CommunicationCategory"
    
    RecipientsList:
      description: "List of Recipients"
      type: array
      items:
        $ref: "#/components/schemas/Recipient"
        
    RegisterData:
      description: Registration data input
      type: object
      properties:
        appCategory:
          $ref: '#/components/schemas/ApplicationCategory'
        staticId:
          $ref: '#/components/schemas/ApplicationStaticIdentifier'
        couplingMode:
          $ref: '#/components/schemas/CouplingMode'

    RegisteredData:
      description:  Registration data output
      type: object
      properties:
        appObId:
          $ref: '#/components/schemas/DynamicId'

    # TODO: document error structure
    RegisterErrorData:
      description: Data in case of registration error
      type: object

    # TODO: check whether this shall not be renamed as OBSessionOpenData as TSapp equivalent might be slightly different (e.g. cardinality of recipients)
    SessionOpenData:
      description: Session opening data input
      type: object
      properties:
        appObId:
          $ref: '#/components/schemas/DynamicId'
        localAppIPAddress:
          $ref: '#/components/schemas/IpAddr'
        recipientsList:
          $ref: '#/components/schemas/RecipientsList'

    SessionOpenedData:
      description:  Session opening data output
      type: object
      properties:
        sessionId:
          $ref: '#/components/schemas/SessionId'
        sessionStatus:
          $ref: '#/components/schemas/SessionStartReqFirstStatus'

    # TODO: document error structure
    SessionOpenErrorData:
      description: Data in case of error when opening a session
      type: object
